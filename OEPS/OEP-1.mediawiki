<pre>
  OEP: 1
  Title: OEP Purpose and Guidelines
  Author: ontology Team
  Type: Meta
  Status: Active
  Created: 2018-3-29
</pre>

==What is an OEP?==

OEP stands for ONT Enhancement Proposal. An OEP is a design document providing information to the ONT community, or describing a new feature for ONT or its processes or environment. The OEP should provide a concise technical specification of the feature and a rationale for the feature. The OEP author is responsible for building consensus within the community and documenting dissenting opinions.

==OEP Rational==

We intend OEPs to be the primary mechanisms for proposing new features, for collecting community input on an issue, and for documenting the design decisions that have gone into ONT. Because the OEPs are maintained as text files in a versioned repository, their revision history is the historical record of the feature proposal.

For ONT implementers, OEPs are a convenient way to track the progress of their implementation. Ideally each implementation maintainer would list the OEPs that they have implemented. This will give end users a convenient way to know the current status of a given implementation or library.

==OEP Types==

There are three types of OEP:

*A '''Standards Track''' OEP describes any change that affects most or all ONT implementations, such as a change to the network protocol, a change in block or transaction validity rules, proposed application standards/conventions, or any change or addition that affects the interoperability of applications using ONT.

*An '''Informational''' OEP describes a ONT design issue, or provides general guidelines or information to the ONT community, but does not propose a new feature. Informational OEPs do not necessarily represent a ONT community consensus or recommendation, so users and implementors are free to ignore Informational OEPs or follow their advice.

*A '''Meta''' OEP describes a process surrounding ONT or proposes a change to (or an event in) a process. Meta OEPs are like Standards Track OEPs but apply to areas other than the ONT protocol itself. They may propose an implementation, but not to ONT's codebase; they often require community consensus; unlike Informational OEPs, they are more than recommendations, and users are typically not free to ignore them. Examples include procedures, guidelines, changes to the decision-making process, and changes to the tools or environment used in ONT development.

==OEP Work Flow==

The OEP process begins with a new idea for ONT. It is highly recommended that a single OEP contain a single key proposal or new idea. The more focused the OEP, the more successful it tends to be. A change to one client doesn't require an OEP; a change that affects multiple clients, or defines a standard for multiple apps to use, does. The OEP editor reserves the right to reject OEP proposals if they appear too unfocused or too broad. If in doubt, split your OEP into several well-focused ones.

Each OEP must have a champion - someone who writes the OEP using the style and format described below, shepherds the discussions in the appropriate forums, and attempts to build community consensus around the idea.

Vetting an idea publicly before going as far as writing an OEP is meant to save the potential author time. Asking the ONT community first if an idea is original helps prevent too much time being spent on something that is guaranteed to be rejected based on prior discussions (searching the Internet does not always do the trick). It also helps to make sure the idea is applicable to the entire community and not just the author. Just because an idea sounds good to the author does not mean it will work for most people in most areas where ONT is used. Examples of appropriate public forums to gauge interest around your OEP include [https://www.reddit.com/r/ONT the ONT subreddit], [https://github.com/ontio/OEPs/issues the Issues section of this repository]. In particular, [https://github.com/ontio/OEPs/issues the Issues section of this repository] is an excellent place to discuss your proposal with the community and start creating more formalized language around your OEP.

Once the champion has asked the ONT community whether an idea has any chance of acceptance a draft OEP should be presented as a pull request. This gives the author a chance to continuously edit the draft OEP for proper formatting and quality. This also allows for further public comment and the author of the OEP to address concerns about the proposal.

If the OEP collaborators approve, the OEP editor will assign the OEP a number, label it as Standards Track, Informational, or Meta, give it status "Draft", and add it to the git repository. The OEP editor will not unreasonably deny an OEP. Reasons for denying OEP status include duplication of effort, being technically unsound, not providing proper motivation or addressing backwards compatibility, or not in keeping with the ONT philosophy.

Standards Track OEPs consist of three parts, a design document, implementation, and finally if warranted an update to the formal specification. The OEP should be reviewed and accepted along with the implementation. Further more, a standard OEP is targeting to enhance all ONT implementations, an ACCEPTED status of Standard OEP shall also be verified by real project. Standards Track OEPs must include an implementation -- in the form of code, a patch, or a URL to same -- before it can be considered Final.

For an OEP to be accepted it must meet certain minimum criteria. It must be a clear and complete description of the proposed enhancement. The enhancement must represent a net improvement. The proposed implementation, if applicable, must be solid and must not complicate the protocol unduly.

Once an OEP has been accepted, the implementations must be completed. When the implementation is complete and accepted by the community, the status will be changed to "Final".

An OEP can also be assigned status "Deferred". The OEP author or editor can assign the OEP this status when no progress is being made on the OEP. Once an OEP is deferred, the OEP editor can re-assign it to draft status.

An OEP can also be "Rejected". Perhaps after all is said and done it was not a good idea. It is still important to have a record of this fact.

OEPs can also be superseded(replaced) by a different OEP, rendering the original obsolete.

The possible paths of the status of OEPs are as follows:

[[Image:/resource/OEP-1/process.png|OEP Process]]

Some Informational and Meta OEPs may also have a status of "Active" if they are never meant to be completed. E.g. OEP 1 (this OEP).

==What belongs in a successful OEP?==

Each OEP should have the following parts:

*Preamble -- [https://tools.ietf.org/html/rfc822 RFC 822] style headers containing meta-data about the OEP, including the OEP number, a short descriptive title (limited to a maximum of 44 characters), the names, and optionally the contact info for each author, etc.

*Abstract -- a short (~200 words) description of the technical issue being addressed.

*Motivation (*optional) -- The motivation is critical for OEPs that want to change the ONT protocol. It should clearly explain why the existing protocol specification is inadequate to address the problem that the OEP solves. OEP submissions without sufficient motivation may be rejected outright.

*Specification -- The technical specification should describe the syntax and semantics of any new feature. The specification should be detailed enough to allow competing, interoperable implementations for any of the current ONT platforms.

*Rationale -- The rationale fleshes out the specification by describing what motivated the design and why particular design decisions were made. It should describe alternate designs that were considered and related work, e.g. how the feature is supported in other languages. The rationale may also provide evidence of consensus within the community, and should discuss important objections or concerns raised during discussion.

*Backwards Compatibility -- All OEPs that introduce backwards incompatibilities must include a section describing these incompatibilities and their severity. The OEP must explain how the author proposes to deal with these incompatibilities. OEP submissions without a sufficient backwards compatibility treatise may be rejected outright.

*Test Cases -- Test cases for an implementation are mandatory for OEPs that are affecting consensus changes. Other OEPs can choose to include links to test cases if applicable.

*Implementations -- The implementations must be completed before any OEP is given status "Final", but it need not be completed before the OEP is accepted. It is better to finish the specification and rationale first and reach consensus on it before writing code.

==OEP Formats and Templates==

OEPs should be written in [https://www.mediawiki.org/wiki/Help:Contents mediawiki] or [https://help.github.com/articles/basic-writing-and-formatting-syntax/ markdown] format. Image files should be included in a subdirectory of resource, with a folder of OEP-x.

===OEP Header Preamble===

Each OEP must begin with an [https://tools.ietf.org/html/rfc822 RFC 822] style header preamble. The headers must appear in the following order. Headers marked with "*" are optional and are described below. All other headers are required.

<pre>
  OEP: <OEP number>(this is determined by the OEP editor, reuse issue id in most cases)
  Title: <OEP title>
  Author: <list of authors' real names and optionally, email address>
 *Discussions-To: <email address>
  Status: <Draft | Active | Accepted | Deferred | Rejected | Withdrawn | Final | Replaced>
  Type: <Standard | Informational | Meta>
  Created: <date created on, in ISO 8601 (yyyy-mm-dd) format>
 *Replaces: <OEP numbers>
 *Superseded-By: <OEP number>
 *Resolution: <url>
</pre>

The Author header lists the names, and optionally the email addresses of all the authors/owners of the OEP. The format of the Author header value must be

<pre>
  Random J. User <address@dom.ain>
</pre>

if the email address is included, and just

<pre>
  Random J. User
</pre>

if the email address is not given.

If there are multiple authors, each should be on a separate line following RFC 2822 continuation line conventions.

Note: The Resolution header is required for Standards Track OEPs only. It contains a URL that should point to an email message or other web resource where the pronouncement about the OEP is made.

While an OEP is in private discussions (usually during the initial Draft phase), a Discussions-To header will indicate the mailing list or URL where the OEP is being discussed. No Discussions-To header is necessary if the OEP is being discussed privately with the author.

The Type header specifies the type of OEP: Standard, Informational, or Meta.

The Created header records the date that the OEP was assigned a number. It should be in yyyy-mm-dd format, e.g. 2001-08-14.

OEPs may have a Requires header, indicating the OEP numbers that this OEP depends on.

OEPs may also have a Superseded-By header indicating that an OEP has been rendered obsolete by a later document; the value is the number of the OEP that replaces the current document. The newer OEP must have a Replaces header containing the number of the OEP that it rendered obsolete.

===Auxiliary Files===

OEPs may include auxiliary files such as diagrams. Such files must be included in a subdirectory for /resource/OEP-x, where "x" is the OEP number.

==Transferring OEP Ownership==

It occasionally becomes necessary to transfer ownership of OEPs to a new champion. In general, we'd like to retain the original author as a co-author of the transferred OEP, but that's really up to the original author. A good reason to transfer ownership is because the original author no longer has the time or interest in updating it or following through with the OEP process, or has fallen off the face of the 'net (i.e. is unreachable or not responding to email). A bad reason to transfer ownership is because you don't agree with the direction of the OEP. We try to build consensus around an OEP, but if that's not possible, you can always submit a competing OEP.

If you are interested in assuming ownership of an OEP, send a message asking to take over, addressed to both the original author and the OEP editor. If the original author doesn't respond to email in a timely manner, the OEP editor will make a unilateral decision (it's not like such decisions can't be reversed :).

==OEP Editors==

The current OEP editors are

*Ning Hu (@javajoker)
*Edmond (@Honglei-Cong)

==OEP Editor Responsibilities & Workflow==

For each new OEP that comes in, an editor does the following:

*Read the OEP to check if it is ready: sound and complete. The ideas must make technical sense, even if they don't seem likely to be accepted.

*The title should accurately describe the content.

*Edit the OEP for language (spelling, grammar, sentence structure, etc.), markup (Github flavored Markdown), code style

If the OEP isn't ready, the editor will send it back to the author for revision, with specific instructions.

Once the OEP is ready for the repository, the OEP editor will:

*Assign an OEP number (almost always just the next available number, but sometimes it's a special/joke number, like 666 or 3141) in the pull request comments.

*Merge the pull request when the author is ready (allowing some time for further peer review).

*List the OEP in [[README.mediawiki]]

*Send a message back to the OEP author with next steps.

The OEP editors are intended to fulfill administrative and editorial responsibilities. The OEP editors monitor OEP changes, and correct any structure, grammar, spelling, or markup mistakes we see.

==History==

This document was derived heavily from [https://github.com/bitcoin/bips/blob/master/bip-0001.mediawiki Bitcoin's BIP-0001] written by Amir Taaki which in turn was derived from [https://www.python.org/dev/peps/pep-0001/ Python's PEP-0001]. In many places text was simply copied and modified. Although the PEP-0001 text was written by Barry Warsaw, Jeremy Hylton, and David Goodger, they are not responsible for its use in the ONT improvement process, and should not be bothered with technical questions specific to ONT or the OEP process. Please direct all comments to the OEP editors.
