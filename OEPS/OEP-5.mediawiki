<source lang="csharp">
  OEP: 5
  Title: Non-fungible Token Standard
  Author: tanyuan <tanyuan666@gmail.com>, zhoupw <zhoupw@gmail.com>, tonyclarking<tonyclarking@gmail.com>, blckchan<1258176714@qq.com>
  Type: Standard
  Status: Accepted
  Created: 2018-07-26
</source>

==Abstract==

The OEP-5 Proposal is a standard interface for NFTs. This standard allows for the implementation of a standard API for NFTs within smart contracts.

==Motivation==

A standard NFT interface which allows NFTs on the Ontology blockchain to be conveniently used by other applications.

==Specification==

===Basic Methods===

====name====

<pre>
def name()
</pre>

Returns a <code>string</code>, the name of the NFTs - e.g. "My Non-Fungibles".

====symbol====

<pre>
def symbol()
</pre>

Returns a <code>string</code>, the short symbol of the NFTs - e.g. <code>"MNFT"</code>.

This symbol should be short (3-8 characters is recommended), with no whitespace characters or new-lines and should be limited to the uppercase latin alphabet (i.e. the 26 letters used in English).

====totalSupply====

<pre>
def totalSupply()
</pre>

Returns the total number of NFTs.

====balanceOf====

<pre>
def balanceOf(address)
</pre>

Returns the number of NFTs assigned to <code>address</code>.

The parameter <code>address</code> must be a 20-byte address.
If not, this method must <code>throw</code> an exception.

===Ownership Methods===

==== ownerOf====

<pre>
def ownerOf(tokenId)
</pre>

Returns the address currently marked as the owner of the NFT with id of <code>tokenId</code>.
<code>tokenId</code> should be string or a bytearray.
If the owner address of <code>tokenId</code> can't be determined, this method must <code>throw</code> an exception.

====transfer====

<pre>
def transfer(to, tokenId)
</pre>

Transfers the NFT from the owner address of <code>tokenId</code> to the <code>to</code> address.
<code>tokenId</code> should be string or bytearray.
If the owner address of <code>tokenId</code> can't be determined, this method must <code>throw</code> an exception.
<code>to</code> must be 20-byte address. If not, this method must <code>throw</code> an exception.

====transferMulti====

<pre>
def TransferMulti(args)

state = {
  to: <TO ADDRESS>,
  tokenId: <TOKEN ID>
}
</pre>

The transferMulti function allows the transferring of multiple NFTs to multiple <code>to</code> addresses.
The parameter is an array of objects, the object is a <code>state</code> struct, which contains two items: the receiver address <code>to</code> (which must be 20-byte address) and the <code>tokenId</code> of the NFT.
If any of the transfers fail, all of the transfers must be failed, and the method must <code>throw</code> an exception.


====approve====

<pre>
def approve(to, tokenId)
</pre>


The approve function allows the <code>to</code> address to transfer the <code>tokenId</code> NFT.
If this function is called again it overwrites the <code>to</code> address that can transfer the NFT.
<code>tokenId</code> should be string or bytearray.
The <code>to</code> address must be 20-byte address.
If not, this method must <code>throw</code> an exception.

====takeOwnership====

<pre>
def takeOwnership(to, tokenId)
</pre>

Either the token owner or the approved account can assign the ownership of the NFT with the id <code>tokenId</code> to the <code>to</code> address.
<code>tokenId</code> should be string or bytearray.
<code>to</code> must be 20-byte addresses.
If not, this method must <code>throw</code> an exception.

===Optional Methods===

====tokenMetadata====

<pre>
def tokenMetadata(tokenId)
</pre>

This method is optional.

Returns the url referencing an external resource that contains metadata about the NFT associated with the id <code>tokenId</code>.
<code>tokenId</code> should be string or bytearray.

The url info string must be an IPFS or HTTP(S) base path.<br/>
Metadata JSON Schema:<br/>
* name (required) - The name contain the UTF-8 encoded name of specific NFT, which should be short (3-8 characters is recommended)
* image (optional) - If the image exist, it MUST contain a PNG, JPEG, or JPG image with at least 300 pixels of detail in each dimension. (1:1 image is recommended)
* description (optional) - If the description exist, it MUST contain a UTF-8 encoded textual description of the asset. The description should be 1500 characters or less.
* other metadata (optional) - other extension information.

===Events===

====transfer====

<pre>
TransferEvent = RegisterAction("transfer", "from", "to", "tokenId")
</pre>

The event must be triggered when NFTs are transferred, including zero value transfers.
A token contract which creates new NFTs must trigger a <code>transfer</code> event with the <code>from</code> address set to <code>null</code>.
A token contract which burns tokens must trigger a <code>transfer</code> event with the <code>to</code> address set to <code>null</code> when tokens are burned.

====approval====

<pre>
ApprovalEvent = RegisterAction("approval", "from", "to", "tokenId")
</pre>

The event must be triggered on any successful calls to approve.

===Implementation===

OEP-5 Template: [[https://github.com/ONT-Avocados/python-template/blob/master/OEP5Sample/OEP5Sample_compiler2.0.py | Python Template]]
