<pre>
  OEP: 4
  Title: Token Standard
  Author: luodanwg <luodan.wg@gmail.com>, tanyuan <tanyuan666@gmail.com>, zhoupw <zhoupw@gmail.com>
  Type: Standard
  Status: Accepted
  Created: 2018-07-03
</pre>

==Abstract==

The OEP-4 Proposal is a standard interface for tokens.
This standard allows for the implementation of a standard API for tokens within smart contracts.

==Motivation==

A standard token interface which allows tokens on the Ontology blockchain to be conveniently used by other applications.

==Specification==

===Methods===

====name====

<pre>
def name()
</pre>

Returns a <code>string</code>, the name of the token - e.g. "MyToken".

====symbol====

<pre>
def symbol()
</pre>

Returns a <code>string</code>, the short symbol of the token - e.g. <code>"MYT"</code>.

This symbol should be short (3-8 characters is recommended), with no whitespace characters or new-lines and should be limited to the uppercase latin alphabet (i.e. the 26 letters used in English).

====decimals====

<pre>
def decimals()
</pre>

Returns the number of decimals used by the token - e.g. <code>8</code>, means to divide the token amount by <code>100,000,000</code> to get its user representation.

====totalSupply====

<pre>
def totalSupply()
</pre>

Returns the total number of tokens.

====balanceOf====

<pre>
def balanceOf(address)
</pre>

Returns the token balance of the <code>address</code>.

The parameter <code>address</code> must be a 20-byte address. If not, this method must <code>throw</code> an exception.

====transfer====

<pre>
def transfer(from, to, amount)
</pre>

Transfers an <code>amount</code> of tokens from the <code>from</code> account to the <code>to</code> account.
The parameters <code>from</code> and <code>to</code> must be 20-byte address. If not, this method must <code>throw</code> an exception.
The parameter <code>amount</code> is the number of tokens to transfer, must be greater than or equal to 0.

====transferMulti====

<pre>
def TransferMulti(args)

state = {
  from: <FROM ADDRESS>,
  to: <TO ADDRESS>,
  amount: <AMOUNT>
}
</pre>

The transferMulti function allows the transferring of tokens from multiple <code>from</code> addresses to multiple <code>to</code> addresses with multiple <code>amount</code>s of tokens.
The parameter is an array of objects, the object is a <code>state</code> struct, which contains three items: the sender address <code>from</code> (which must be 20-byte address), the receiver address <code>to</code> (which must be 20-byte address) and the <code>amount</code> of tokens to transfer.
If any of the transfers fail, all of the transfers must be failed, and the method must <code>throw</code> an exception.

====approve====

<pre>
def approve(owner, spender, amount)
</pre>

The approve function allows the <code>spender</code> address to withdraw tokens from the <code>owner</code> address, of up to <code>amount</code> tokens.
If this function is called again it overwrites the current allowance with the new value.
The parameters <code>owner</code> and <code>spender</code> must be 20-byte addresses.
If not, this method must <code>throw</code> an exception.

====transferFrom====

<pre>
def transferFrom(spender, from, to, amount)
</pre>

The transferFrom method is used for a withdraw workflow - allowing the <code>spender</code> address to withdraw <code>amount</code> tokens from the <code>from</code> address and send it to the <code>to</code> address.
The parameters <code>spender</code>, <code>from</code> and <code>to</code> must all be 20-byte addresses.
If not, this method must <code>throw</code> an exception.

====allowance====

<pre>
def allowance(owner, spender)
</pre>

Returns the amount which the <code>spender</code> address is still allowed to withdraw from the <code>owner</code> address.

===Events===

====transfer====

<pre>
TransferEvent = RegisterAction("transfer", "from", "to", "amount")
</pre>

The event must be triggered when tokens are transferred, including zero value transfers.
A token contract which creates new tokens must trigger a <code>transfer</code> event with the <code>from</code> address set to <code>null</code> when tokens are created.
A token contract which burns tokens must trigger a <code>transfer</code> event with the <code>to</code> address set to <code>null</code> when tokens are burned.

====approval====

<pre>
ApprovalEvent = RegisterAction("approval", "owner", "spender", "amount")
</pre>

The event must be triggered on any successful calls to approve.

===Implementation===

OEP-4 Python Template: [[https://github.com/ONT-Avocados/python-template/blob/master/OEP4Sample/OEP4Sample_compiler2.0.py | Python Template]]
