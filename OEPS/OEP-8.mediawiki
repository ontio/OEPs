<pre>
  OEP: 8
  Title: Crypto Item Standard
  Author: tanyuan <tanyuan666@gmail.com>, zhoupw <zhoupw@gmail.com>, tonyclarking<tonyclarking@gmail.com>, blckchan<1258176714@qq.com>
  Type: Standard
  Status: Accepted
  Created: 2018-10-16
</pre>

==Abstract==

The OEP-8 Proposal is a standard interface for Crypto Items.
This standard allows you to transfer any amount of tokens for different Crypto Items from one address to another address.
It combines the advantages of OEP-4 and OEP-5 to make transferring different types of Crypto Items convenient.

==Motivation==
With the development of smart contracts and dApps, the requirement of transferring different amounts of different tokens has become more intense.
If you want to transfer different amounts of different tokens from one address to another address or to do batch transfers, it is very difficult.
The OEP-8 Proposal aims to solve this problem.

==Specification==

===Methods===

====name====

<pre>
def name(tokenId)
</pre>

Returns the name of the Crypto Item with id <code>tokenId</code> - e.g. "My Crypto Item".

====symbol====

<pre>
def symbol(tokenId)
</pre>

Returns a short string symbol of the Crypto Item with id <code>tokenId</code> - e.g. <code>"MCI"</code>.
This symbol should be short (3-8 characters is recommended), with no whitespace characters or new-lines and should be limited to the uppercase latin alphabet (i.e. the 26 letters used in English).

====totalSupply====

<pre>
def totalSupply(tokenId)
</pre>

Returns the total number of Crypto Items with an id <code>tokenId</code>.

====balanceOf====

<pre>
def balanceOf(address, tokenId)
</pre>

Returns the number of Crypto Items with the id <code>tokenId</code> assigned to <code>address</code>.
The parameter <code>address</code> must be a 20-byte address.
If not, this method must <code>throw</code> an exception.

====transfer====

<pre>
def transfer(from, to, tokenId, amount)
</pre>

Transfers <code>amount</code> of Crypto Items with the id <code>tokenId</code> from the <code>from</code> address to the <code>to</code> address.
The parameters <code>from</code> and <code>to</code> must be 20-byte addresses.
If not, this method must <code>throw</code> an exception.

====transferMulti====

<pre>
def TransferMulti(args)

state = {
  from: <FROM ADDRESS>,
  to: <TO ADDRESS>,
  tokenId: <TOKEN ID>,
  amount: <AMOUNT>
}
</pre>

The transferMulti method allows to transfer multiple times with varying <code>amount</code>s, <code>tokenId</code>s, <code>from</code> addresses and <code>to</code> addresses.
The parameters <code>from</code> and <code>to</code> must be 20-byte addresses.
If not, this method must <code>throw</code> an exception.
If any of the transfers fail, all of the transfers must be failed, and the method must <code>throw</code> an exception.

====approve====

<pre>
def approve(from, to, tokenId, amount)
</pre>

The approve method allows to grant the <code>amount</code> of Crypto Items with the id <code>tokenId</code> from the <code>from</code> address to the <code>to</code> address.
If this function is called again it overwrites the <code>amount</code> allowed for the <code>to</code> address.
The parameters <code>from</code> and <code>to</code> must be 20-byte addresses.
If not, this method must throw an exception.

====transferFrom====

<pre>
def transferFrom(spender, from, to, tokenId, amount)
</pre>

The transferFrom method is used for a withdraw workflow - allowing the <code>spender</code> address to withdraw <code>amount</code> of Crypto Items with the id <code>tokenId</code> from the <code>from</code> address and send it to the <code>to</code> address.
The parameters <code>spender</code>, <code>from</code> and <code>to</code> must be 20-byte addresses.
If not, this method must <code>throw</code> an exception.

====allowance====

<pre>
def allowance(owner, spender, tokenId)
</pre>

Returns the amount of Crypto Items with the id <code>tokenId</code> which <code>spender</code> is still allowed to withdraw from <code>owner</code>.

====approveMulti====
<pre>

def approveMulti(args)

state = {
  from: <FROM ADDRESS>,
  to: <TO ADDRESS>,
  tokenId: <TOKEN ID>,
  amount: <AMOUNT>
}
</pre>

The approveMulti method allows to grant multiple <code>amount</code> of Crypto Items with the id <code>TokenId</code>.
The Parameters <code>from</code> and <code>to</code> must be 20-byte addresses.
If not, this method must throw an exception.

====transferFromMulti====

<pre>
def transferFromMulti(args)

state = {
  spender: <SPENDER ADDRESS>,
  from: <FROM ADDRESS>,
  to: <TO ADDRESS>,
  tokenId: <TOKEN ID>,
  amount: <AMOUNT>
}
</pre>

The transferFromMulti method is used for a withdraw workflow - allowing multiple calls to <code>transferFrom</code>.
The parameters <code>spender</code>, <code>from</code> and <code>to</code> must be 20-byte addresses.
If not, this method must throw an exception.

==Event==

====transfer====

<pre>
TransferEvent = RegisterAction("transfer", "from", "to", "tokenId", "amount")
</pre>

The event must be triggered when tokens are transferred, including zero value transfers.
A token contract which creates new tokens must trigger a <code>transfer</code> event with the <code>from</code> address set to <code>null</code> when tokens are created.
A token contract which burns tokens must trigger a <code>transfer</code> event with the <code>to</code> address set to <code>null</code> when tokens are burned.

====approval====

<pre>
ApprovalEvent = RegisterAction("approval", "from", "to", "tokenId", "amount")
</pre>

The event must be triggered on any successful calls to approve.

==Implementation==

OEP-8 Python Template: [[https://github.com/ONT-Avocados/python-template/blob/master/OEP8Sample/OEP8Sample_compiler2.0.py | Python Template]]
